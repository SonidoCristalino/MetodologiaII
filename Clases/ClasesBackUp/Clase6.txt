-----
SCRUM: 
-----

    - No tiene jefe. 
    - Actividades: 
        - no se de donde lo saco

Planificación de la iteración: 
    - Lista de requisitos 
    - Equipo decide hasta dónde llega la iteración. 
    - A diferencia con XP no se mirar hacia atrás. 
    - El equipo se compromete con respecto a las tareas que va a realizar. 
    - Reunion sale la lisa de tareas que tienen que llevar delante los desarrolladores. 
    - Una vez repartidas las tareas comienza el sprint. Cada iteración dura entre 15 y 30 días. Cada iteración devuelve
    un paquete entregable, pruebas, desarrollo. 
    - Reunion de sicronización todos los días. 
    - No se pueden cambiar los requsitos en el medio de la iteración. 
    - Se puede abortar una iteración, cuando es peor seguirlo que dejarlo inconcluso 
    - Demostración: una vez que se terina la iteración, el equipo muestra al cliente lo desarrollado. Si no llega a
    gustar, hay que decirlas ahí para definir qué cambiar así entra en la próxima iteración. 
    - Retrospectiva: Reunión de equipo, se piensa cómo se trabajó en ese momento, se reveen las formas de trabajo. 
    - Replanificación del proyectco: interviene el cliente y salen los requisitos par ala próxima iteración. 
    - Herramientas de Scrum: Backlog (lista de requisitos priorizada por el cliente), lista de tareas de iteración
    (spring backlog), y el gráfico de Burndown chart. 

Roles tareas que tiene : 
    - Cliente, Product owner: participa de las reuiones, pero NO participa activamente, como en XP; replanifica el
    proyecto cuando no le gusta o cuanado hay que replanificar la iteración; participa de la reunión de la demo. 
    - Scrum master: guiar al equipo, NO lo dirige, lo dirige, interviene para facilitar todo lo que tenga que ver entre
    el cliente y el equipo, guia al equipo a autogestionarse, no le dice lo que tiene que hacer, le quita obstáculos
    para que pueda llevar a cabo las tareas que se comprometieron. 
    - Equipo: entre 5 y 9, tienen que laburar en el mismo lugar físico, no es aconsejable que cambien los integrantes,
    los equipos no pueden tener trabajos en otros proyectos, tienen dedicación exclusiva al proyecto. El equipo
    interviene en las estimaciones. Se reunen todo el equipo para comprometerse; tambien le hace una demostración al
    cliente de las cosas desarrolladas.  NO se debe sobrecargar el equipo, si es más, se debe extender el plazo. 

Principales herramientas que propone Scrum:
    -Lista de requisitos priorizada (Product Backlog)
    -Lista de tareas de la iteración (Sprint Backlog)
    -Gráfico de trabajo pendiente (Burndown): sirve para poder mostrar el avance del proyecto, sirve para realizar
                                              previsiones, para saber si se está atrasado o no. 

------
Kanban:
------
    Sistema visual donde se utiliza una pizarra, se divide la pizarra entre diferentes columnas. Se pegan en el pizarron
    cada post-it donde en cada uno figura el nombre de la persona, la tarea, y en qué estado está (en qué columna). NO
    tiene roles, no hay jerarquía. Se pone también cuántos días estará en ese estado
    Liderazgo : se promueve acciones de liderazgo en todos los niveles. 
    Se avanza de a poco en el proyecto y se hacen avances pequeños pero continuos. 
    Limites del Wip (work in progress): límite del trabajo de la semana y por día. Se establece limites para cada
    columna, para cada estado de trabajo (in progress, to do, etc). 
    Se mide el "lead time": se mide desde que se pide la tarea hasta que se entrega. 
    "cicle time": desde que se toma la tarea a desarrollar y se entrega. 

ScranBan: 
    Ver que cosa toma de cada metodología. 

------
Examen: 
------
    Lo que hay que saber: 
    12 principios de la metodologías ágiles. NO importa todo lo que tenga que ver lo de historia. 
    XP, las fases, Scrum: actividades. 
    Herramientas que se utilizan en cada una, los roles en una y en otras, los 
    Cosas propias de cada una de las Metodolgías: 
        * Kanban: lo que se habló anteriormente, NADA MAS. El Wep, el cicle time, y el lead time, lo de la pizarra que
        es algo escencial. 
        * XP: programación en pareja. Característica principal de cada uno. 
        * Scrum: el gráfico burndown, equipo de 9 parejas. Que no está el cliente. 

    Lo que hay que hacer para la práctica es los ejercicios: 
        * Hospital y 
        * Veterinaria. 

    * Jerarquías: "es un", un alumno ES UNA persona, etc. 
    * Atributos: tienen que ser compartidos, hereda todo de la superclase, 
    Diagrama de clases: no aparecen OBJECT, aparece la multiplicidad, respetar lo que dice el enunciado. 
        * Herencia: no es herencia hasta que se haga el simbolo de la herencia, NO IMPORTA dónde es que se dibuja la
        clase. 
    Diagrama de secuencia: 
        * El mensaje del comienzo es el mensaje que da el puntapié que va a disparar varios objetos para responder ese
        mensaje. 
        * Recordar que las tablas se representan como un objeto más de la secuencia. Por ejemplo "tabla de cuentas". 

        Ejemplo: mensaje prestarLibro() en una biblioteca. 

        prestarLibro() lo va a recibir algún objeto, si existe una tabla por ejemplo de Tablas prestados. 
        Quien lo recibe al comienzo es la Biblioteca. Se le manda como parámetro el ISBN, 
        Se da por entendido que habrá sólo un título. 

        Mensaje Principal : prestarLibro(numSocio, titulo) 

                    * [ se envía a la Tabla de Socio]
                    S = buscarSocio(numSocio) [Debe existir el método en la clase]
                    [S = nil]
                        Error: socio no existe
                    [S != nil]
                        Sigue

                    * [se envía al objeto unSocio]
                    CL = verCantLibros(nroSocio)
                    [CL > 3]
                        Error: no se puede prestar
                    [CL < 3] 
                        Sigue

                    * [se envía a la tabla de Libros]
                    L= SeleccionarLibro(Titulo) 
                    [L = nill]
                        Error: el libro no exite
                    [ L != nil]
                        Sigue

                    * [se envía al objeto unSocio]
                    I = incrementarCantLibros()

                    * [Se envía al objeto unLibro]
                    E = modificarEstado()
                    N = modificarNroSocio(nroSocio)
                    


-----------------
Diagrama de Clase: 
-----------------

Clase biblioteca: 
    Nombre
    Libros-----1 a muchos con la Clase Libro (multiplicacidad)
    Socios -----> 1 a muchos con la Clase Socios (multiplicidad)
    --------
    verLibro()
    eliminarLibro()
    agregarLibro()
    buscarLibro()
    verSocio()
    agregarSocio()
    eliminarSocio()
    buscarSocio()
    prestarLibro()
    devolverLibro()

Clase Libro: 
    ISBN
    Titulo
    Editorial
    Autor
    Estado
    NroSocio
    ---------
    modificarISBN()
    verLibro()
    modificarEstado()
    modificarNroSocio()


Clase Socio: 
    Nro socio
    CantidadDePrestado
    ---------
    verSocio()
    agregarSocio()
    eliminarSocio()
    verCantLibros()

    
--------
Hospital: 
--------

    Varias especialidades: oncología, pediatria, etc
    
    Cada espcialidad cuenta con un grupo d médicos que atiende pacientes. 

    tiene habitaciones (2 camas)

    salas generales (camas variables)

Secuencia: 
    Paciente tiene un diagnóstico. 
    Hospital determina si puede ser atendido por el diagnóstico, en caso afirmativo: 
        se busca cama primero en las habitaciones y de no haber, luego en las salas generales. 
        cuando se encuentra la cama, se asigna un médico al paciente según especialidad


Diagrama de Clases: 

Clase Persona: 
    nombre
    dni
    ----------
    verNombre()
    verDni()
    modificarNombre()
    modificarDNI()

Clase Paciente: 
    diagnostico
    medicoAsignado
    nroCama
    -------------
    verDiagnostico()
    modificarDiagnostico()
    modificarMedico()
    verNroCama()
    modificarNroCama()

Clase Médico: 
    especialidad
    pacienteAsignado
    -----------------
    verEspecialidad()
    verPaciente()
    modificarPaciente()

Clase Cama: 
    numero
    paciente
    estado
    ------------
    verNumero()
    verPaciente()
    verEstado()
    modificarNumero()
    modificarPaciente()
    modificarEstado()

Clase Habitaciones: 
    camasDisponibles = 2
    estado
    --------------
    modificarEstado()

Clase SalaGeneral: 
    camasDisponibles
    --------------
    verEstado()
    modificarEstado()

Clase Hospital: 
    nombre
    especialidad
    habitaciones
    salaGeneral
    -------------
    verEspecialidad()
    verHabitacionesDispo()
    verSalaGeneral()
    modificarEspecialidad()
    modificarHabitacionesDispo()
    modificarSalaGeneral()

Nota en Clase 3: hospital
    Hay que hacer una Clase Especialidad. 


    


