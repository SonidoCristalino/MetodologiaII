Clase III: 
Clases de consulta aula: 310 a partir d las 17:30 los días martes. 

Programación extrema: pone enfasis en la adaptabilidad que la previsibilidad. 
Prefiere invertir tiempo en los cambios a medida que llegan a generar planes. 
(se ahorra de poder ver lo que va a venir dentro de 6 meses). 
La tradicional = más previsibles 

Actividadds que se realizan, se llaman en distitna manera en las Extremas en las
tradicionales. 
Fases: 
    Exploracion: se determina el alcance del proyecto se recaudan las historias
    de usuario y se determina cuánto tiempo va a durar el proyecto en base a las
    historias de usuario. La fase dura: aproximadamente 2 semanas. 
    
    Planificacion: cliente, gerentes, desarrolladores, TODOS según la profesora.
    En otras metodología no se incluye el cliente para esta fase. 
    Se determina el orden en que se va a ejectura, a qué historia se le da más
    bola, y a partir de ahí se determina la entrega. Una vez que se deterina la
    entrega comienza la fase de Iteración. 

    Iteración: se implementan una parte de la historias de usuario. Algunas
    veces se redefine el orden de las historias. En una iteración se implementa
    las hitistirias y se entregan un software funcionando. 
    Partes de la iteración: Analisis, diseño, programación pruebas. 
    Cuando se hace cada itreación se hacen pruebas, todo el tiemp ose está
    probando lo nuevo y lo que ya se había probado.  Iteración permite medir el
    avance del proyecto. 

    Historia de usuario: tiene que tener la información necesaria para que se
    pueda estimar el tiempo que va a llevar desarrollarlo. No se documenta todo,
    lo menos posible como para que se entienda lo que se está haciendo. 
    Cuando se implementa una historia de usuario el cliente tiene que estar
    activamente en cada implementación, ya que da ayuda. Ayuda activamente en la
    iteración el cliente. 
    Las historias las escriben los usuarios en un lenguaje lo más sencillo
    posible. 
    Se analizan y se generan un plan de entregas. 
    Historias de usuario sustituyen los casos de usos. 
    Debe durar 1 y 3 semanas, si lleva más entonces se dividen, y si es menos se
    agregan nuevas a la iteración. 
    Las historias de usuario se ordenan según el criterio del cliente. El
    soporte también lo dan el otro equipo, pero predomina el criterio del
    cliente. 

    ¿Cuándo un sistema debería pasar a producción? Cuando está completo. No es
    lo que pasa habitualmente, a veces hay etapas donde se hace una puesta en
    desarrollo; en otros lugares directamente lo pasan a producción sin tener
    una mínima requisito y los errores se corrigen en producción. Como por
    ejemplo en software de liquidación de sueldos que se hacen sobre la marcha y
    la problemática lleva a que los sistemas se degeneren. 
    
    Las consultoras privadas tienden más a utilizar metodologías ágiles que los
    organismos gubernamentales que son más dinámicos y hasta menos
    estructurados. Depende mucho de los jefes o los sectores más altos para
    poder implementar las metodologías. 

    Cuando hay dificultades de definir los tiempos, hay programas que se
    denominan Spikes que sirven para ello. 

    XP se diferencian de las tradicionales por: Todas las personas trabajando en
    el mismo lugar, no hacer horas extras, tampoco incluir otras personas
    temporalmente porque se pierde más tiempo. 


Xp apunta a la simplicidad y a su funcionamiento. 
Características fundamentales del código:
    - Testeable
    - Legible
    - Comprensible
    - Explicable

Refactorizar: código simple y funcional. Reescribir las cosas que quedaron poco
claras. XP sugiere refactorizar cuando sea necesario. Es para que quede más
ordenado y legible. 
Variables: costo, tiempo, calidad y alcance. 

Importante para el examen de XP: fases

------------------
Ejercicio Hospital: 
------------------
*)Se consulta a la especialidad 
*)Luego se consulta el médico (porque la especialidad conoce al médico)
*)Se generan consultan dos cosas: 
    Se va a habitación --> cama 
    Sino se va a la sala --> cama (acá seguro va a haber)

    Si la habitación es == null, va a buscar la cama a la sala. 
    La cama, se va a seleccionar las salas, si se pregunta si es igual a vacío,
    es error, si es mayor a > 0 entonces. 


2da parte de la clase: 
-----------------------------
Tipos de mensajes en SmallTalk: 
-----------------------------

1) Unarios (sin argumento):
    "3 factorial"   

    3       : receptor
    Factoria: mensaje
    Factoria: selector también

    valor de retorno = 6

2) Binarios (tienen un argumento) operaciones matemático-lógicas
    "3 < 5" 

    3       : receptor
    <       : selector
    5       : argumento

    Valor de retorno = true

3) De palabra clave (puede tener 1 o más arguments) van acompañados de: 
    "#(3 5 7 1) at: 2 put:9"

    #(3 5 7 1)      : receptor
    at y put        : selectores
    2 y 9           : argumentos
    at: 2 put: 9    : mensaje

    Valor de retorno = #(3 9 7 1) 
    [Se ve que pone en la posición 2 el valor 9]


Orden de resolución de los mensajes: 
    1) los paréntesis (si hay paréntesis siempre se resuelve primero eso)
    2) Los mensajes unarios, de izquierda a derecha
    3) Los mensajes bianrios, de izquierda a derecha
    4) Los mensajes de palabra clave, de izquierda a derecha

Hay un orden porque en una misma línea, es decir un mensaje anidado, por ello
requiere tener una lógica, hay que saber cóm SmallTalk lo resuelve. 
El lenguaje rquiere que cada linea termine con un "." (punto)

Ejemplos de tipos de mensaje (recordar que todas las lineas deben tenerminar con
        un punto)

1) Unarios: 
    - 5 factorial. 
    - 19,76 rounded. 
    - 'abcd' size. 

2) Binaris: 
    - 'abc' n = 'def'. 
    - 3 > 5. 
    - true and false. 

3) de palabra clave: 
    - #(3 5 7 1) at: 2 put:9. 
    - 5 between: 8 and 10. 

-----------------------------
Ejemplos de mensajes anidados: 
-----------------------------

    - 2 factorial negated. 
        |
        +--> dos tipos de mensajes en la sentencia: dos mensajes unarios

Lo primero que se resuelve es "2 factorial" porque es de izquierda a
derecha. 
    Se resuelve primero: "2 factorial"
        2           : receptor
        factorial   : mensaje

        *) valor de retorno = 2

    Se resuelve segundo: "2 nagated"
        2       : receptor
        negated : mensaje

        *) Valor de retorno = -2 
        
Practica: 
    "3 + 4 * 6 + 3" ---> varios mensajes binarios

Primer mensaje de izquierda a derecha: 
    
    3   : receptor
    + 4 : mensaje
    +   : selector
    4   : argumento

    Valor de retorno = 7

Segundo mensaje de izquierda a derecha: 

    7 * 6 
    7   : receptor
    * 6 : mensaje
    *   : selector
    6   : argumento

    Valor de retorno = 42

Tercer mensaje de izquierda a derecha: 

    42 + 3 
    42   : receptor
    + 3  : mensaje
    +   : selector
    3   : argumento

    Valor de retorno = 45

    Smalltalk NO tiene prioridad sobre los operadores como puede ser C o Pascal,
    siempre resuelve las cosas de izquierda a derecha, de una. Por lo que el
    programador debe poner paréntesis en las operaciones a realizar. 
    

Practica: 
    5 between: 1 and: 3 squared + 2 factorial
    |
    +---------------------> 3 mensajes: 

    1er     : 3 squared = 9
    2do     : 2 factorial  = 2
    3er     : 5 between: 1 and: 1er + 2do
                5 between: 1 and: 9 + 11 = true

Polimorfismo: 

    5 + 100         Valor de retorno = 105

    5       : receptor
    + 100   : mensaje

    5       : receptor
    +100    : mensaje
    +       : selector
    100     : argumento

    (200@300) + 100     Valor de retorno = (300@400)

    (200@300)   : receptor
    + 100       : mensaje
    +           : selector
    100         : argumento

---------------------- 
Estructuras de control 
----------------------

*) Condicionales: 
    (expresión booleana) iftrue: [bloque verdadero]
                         iffalse: [Bloque falso]
        |
        |
        +------------> mensaje de palabra clave.

    Explicación de todo lo anterior: 
    Se resuelve primero la expresión booleana que está en (), que devueve true o
    false los cuals son una instancia de la clase booleana. 
    Esta instancia de booleana se le está enviando un mensaje "iftrue, iffalse"
    ¿Dónde está implementado ese mensaje? Está definido en su protocolo de
    mensaje en la clase o superclase, porque hay herencia, lo puede tomar porque
    lo entiende. 
    Bloques es todo lo que está entre []. Si el que recibe es una instancia
    verdadera, entonces recibe el mensaje bloque verdadero, si el que recibe es
    la instancia falso, entonces recibe el mensaje bloque falso. 
    ¿Qué diferencia hay entre una función y los bloques? La función puede
    devolver un resultado, peude tener argumentos, tiene un nombre y necesitan
    ser invocados. 
    En cambio los bloques son anónimos y se activan cuando el control pasa por
    ellos, no requieren ser invocados. Recordar que son los que están entre []. 

    (expresión booleana) iftrue: [bloque verdadero]

    (expresión booleana) iffalse: [bloque verdadero]

Ejemplo: 
    | a b|
        a := (Prompter prompt: 'Ingrese un número' default: '') asInteger
        b := (Prompter prompt: 'Ingrese un número' default: '') asInteger
            |
            +---> mensaje unario : asInteger
            |
            +---> mensaje de clave: prompt default. Receptor: Prompter (que está
                    en mayúscula y nos indica que es una clase). Lo que hace
            esto es muestra una ventana cuyo título es "ingrese número" Y espera
            el cursor que se ingrese un valor. Ese valor será tomado como de
            tipo String, por lo que se debe convertir en entero. 

        (a < b) iftrue: [a := a + b]
                iffalse: [b := b + 2]

Interpretación del iftrue: 
Los objetos boolean, true y false, entienden el mensaje de palabra clave
iftrue:, iffalse: 

1) La expresión booleana es evaluada, dará como resultado un objeto true o
false. 
2) Si el resultado es true el mensaje iftrue: con sus argumentos serán
enviados al objeto true. 
3) El objeto true responde el mensaje evaluando el [bloque verdadero]. 
4) Si el resultado es false el mensaje iffalse: con sus argumentos serán
enviados al objeto false. 
5) El objeto false responde el mensaje evaluando el [bloque falso]. 

Repetición Condicional: 

    [expresión booleana] whileTrue: [cuerpo del loop]

    [expresión booleana] whileFalse: [cuerpo del loop]

Ejemplo: 
    |suma i|    ---> declaración temporal de variables

    suma := 0 
    i    := 1

    [ i <= 10 ] whileTrue: [ suma := suma + i.
                            i := i + 1.]

    suma inspect. 

    - inspect es una forma de imprimir por ventana (ver mejor las formas de
    mostrar por pantalla)

    - También se puede utilizar '^suma' pero ^suma se debe utilizar sólo cuando
    es LA ULTIMA SENTENCIA del programa, si hay más sentencias, entonces es
    preferible utilizar inspect. 

Interpretación del whileTrue: 
No se tiene paretensis, por lo que el mensaje whiltrue se envia a la expresión
booleana, se evalúa, si el objeto es true entonces se evalua el cuerpo del loop. 

1) El mensaje whileTrue es enviado al bloque 'expresión booleana'
2) Como respuesta, se evalúa el bloque. 
3) Si el bloque retorna el objeto true entonces se evalúa el cuerpo del Loop y
el mensaje whileTrue es nuevamente enviado al bloque de la expresión booleana.
Luego se repiten los pasos 1, 2, 3. 

Repetición de longitud Física: 

ValorInicial to: valorFinal do: [ :variable del loop | cuerpo del loop ]

Ejemplo: 
    | suma |
    suma := 0. 
    1 to: 10 do: [: i | suma := suma + i ]
    suma inspect

    i --> variable de bloque, vive en el cuerpo del loop, se puede ver que la
    variable i se autoincrementa, sin necesidad de declararlo (por ejemplo i++)

El mensaje to: do: evalúa el argumento en bloque para cada entero que esté en el
intervalo dado por el valor del receptor, hasta el valor final incluido


Ejercitación de mensajes: 
------------------------

1) 'casa' isNil. 
2) 9 + 3 * 2. 
3) true is false. 
4) #( 12 65 'olas' true) includes: 'viento'. 
5) 3 * 2 squared
6) 4 + 2 negated between: 3 + 4 * 5 and: 'hello' size * 10

Resolución: 
----------

    1) 'casa' isNil. 
        Mensaje Unarios: 

        'casa'      : receptor
        isNil       : mensaje
        isNil       : selector también

    2) 9 + 3 * 2. 
        Varios mensajes Binarios

        Primer mensaje de izquierda a derecha: 
            
            9 + 3: 
            9   : receptor
            + 3 : mensaje
            +   : selector
            3   : argumento

            Valor de retorno = 12
        
        Segundo mensaje de izquierda a derecha: 
            
            12 * 2
            12   : receptor
            * 2 : mensaje
            *   : selector
            2   : argumento

            Valor de retorno = 24

    3) true is false
        Mensaje Binario

            tru3        : receptor
            is false    : mensaje
            is   : selector
            false   : argumento

    4) #( 12 65 'olas' true) includes: 'viento'. 

        Mensaje de palabra clave, porque lleva ':'

            #(12 65 'olas' true)    : receptor
            include                 : selectores
            viento                  : argumentos
            includes 'viento'       : mensaje

            Valor de retorno = false

    5) 3 * 2 squared
        2 mensajes

        1er     : 2 squared = 4
        2do     : * 3       = 12

        Valor de retorno: 12

    6) 4 + 2 negated between: 3 + 4 * 5 and: 'hello' size * 10
        Varios mensajes: 

Ejercicio para hacer de Diagramas: 
---------------------------------
Una veterinaria tiene información de los animales que atiende. De cada uno de
ellos se guarda una historia clínica, algunos animales deben seguir un
tratamiento. 
La veterinaria tiene un registro de clientes y guarda cada operación monetaria
realizada por el mismo. 
La veterinaria además de esto, vende productos, tiene un plan de vacunación y
guarda la información de los animales que vacuna. 
La veterinaria tiene una agenda de turnos para la atención médica de los
animales. 
Cada cliente tiene una cuenta en donde se registran los pagos realizados a la
veterinaria. 

Lo que se hace es un diagrama de clases y luego un diagrama de secuencias. 


