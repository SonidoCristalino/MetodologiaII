
Práctica:

Clase Collection: 

                                                        Object
                                                           |
                                                        Collection 
                                                            |
                          ----------------------------------------------------------------------
                          |                                 |                                  |
                          Bag                          IndexCollection                         Set 
                                                            |
                                                    ---------------------------                 |
                                                    |                          |                |
                                            FixedSizeCollection         OrderedCollection       Dictionary
                                        -------------------                     |
                                        |       |         |                     |
                                    Internal  Array     String             SortedCollection

Array: 
-----
    |a|
    a:=array new: 3
    a at: 1 put: 5
    a at: 2 put: 7
    a at: 3 put: 9

    a inspect #(5 7 9)

    (a at: 2) inspect: 7

    NO contempla ADD ni REMOVE
    NO Soporta Elementos heterogeneos(que son de distintos tipos). 

OrderedCollection: 
-----------------
    |oc|
    oc := orderedCollection new. 
    oc := add: 5
    oc := add: 9
    oc := add: 1
    oc inspect #(5 9 1). 

    Este si contempla ADD ni REMOVE
    Soporta Elementos heterogeneos(que son de distintos tipos). Pero se debe indicar el criterio de ordenación


SortedCollection: 
-----------------
    |sc|
    sc:= sortedCollection [ver que no tiene new]
    sc:= sortedCollection sortedlbock:[:x,y|x>y] //esto indica el criterio de ordenación. 
    sc:= add: 5
    sc:= add: 9
    sc:= add: 1
    sc inspect #(1 5 9)

    Soporta Elementos heterogeneos. Pero se debe indicar el criterio de ordenación

Para insertar (NO a través de un índice, NO es indexado): 
-------------
    add:
    addFirst:
    addlast
    add: before:
    add: after:
    at: put: [Se inserta de forma indexada]

Para recuperar: 
-------------
    first
    last
    at: [Se recupera de forma indexada]
    
Para eliminar: 
-------------
    remove: [ y objeto que quiero eliminar y tiene que existir si o si ]
    removeFirst
    removeLast
    remove ifAbsent: [En caso de que no exista, devuelve nil, por lo que se puede preguntar por nil cuando se utilice la
    sentencia]

Testeo de colecciones: 
--------------------
    size
    isempty
    include 
    ocurrencesOf: un objeto [devuelve la cantidad de veces que se repite un objeto]

Conversión de Colecciones: 
-------------------------

    |oc sc|
    oc:= orderedCollection
    oc add 5
    oc add 9
    oc add 1
    oc inspect #(5 9 1)

    //En el momento que se quiera imprimir ordenada, se pasa a una coleccion ordenada. 
    sc := oc asSortedCollection
    sc inspect #(1 5 9)

    //Si se quiere ordenar de mayor a menor, entonces se convierte y se le indica el criterio de ordenación. 
    mayor:= oc asSortedCollection:[:x:y|x>y]
    mayor inspect #(951)

Diccionarios: 
------------

|d|
d:= Dictionary new at: 'gorrion' put: 'pajaro'
                    at: 'olmo' put: 'arbol'
                    at: 'golondrina' put: 'pajaro';
                    at: 'sauce' put: 'arbol';
                    yourself.

Dictionario: relacionar la clave con un valor. Las claves NO se pueden repetir, pero si los valores
    |pajaro |arbol|pajaro    |arbol| ---> clave
    |gorrion|olmo |golondrina|sauce| ---> valor
    
d at: 'golondrina' => pajaro
d at: 'gorrion' => pajaro
d at: 'pavo' => error
d at: 'fuego' ifAbsent ['no existe']  => 'no existe' //se le indica qué debe devolver en caso de que no exista entre []
d at: 'fuego' ifAbsent [nil]=> nil


Enumeradores de Coleccion: 
-------------------------
* to do:
    |col suma|
    col:=#(5 4 3)
    suma:=0 

    1 to: (col size) do: [:i | suma := suma + col at:i]. 
    suma inspect. 

* do:   //itera por cada objeto
    |col suma|
    col:=#(5 4 3)
    suma:=0 

    col do:[:i|suma = suma + i]
        El i es un objeto, NO es un indice, en este caso es: 5, luego 4 y luego 3)
    suma inspect. 

Select: 
    |col col1|
    col:= (alumno1, alumno2, alumno3, ...) //se tiene una colección de alumnos
    seleccion:= select:[:alumno|alumno verNota > 7]   //devuelve una colección de alumnos que tienen nota > 7
    seleccion inspect //#(alu alu alu)
    seleccionNegativa := col reject:[:alumno|alumno verNota > 7] //devuelve aquellos QUE NO tienen nota mayor a 7
    colect := col collect:[alumno|alumno verNombre]
    colect inspect //#(nombre1, nombre2, nombre3, ...) devuelve el nombre de todos los alumnos de la coleccion
    
detect: devuelve un objeto, el primero que cumple con determinada condicción
alumno:= col detect:[:alumno|alumno vernota=8] ifNone:[:nil] // si no encuentra ninguno, devulve nil

En los trabajas se deben filtrar elementos, y ademas se deben utilizar un Select, Detect, Inspect


Se tiene que implementar el siguiente mensaje: 

Clase Biblioteca    (Se ve lo que quedó pendiente de la clase nº 5)
----------------
...
>>buscarLibro:UnISBN
A libros detect:[:biblioteca|biblioteca verIsbn=unIsbn] ifNone:[:^nil]
